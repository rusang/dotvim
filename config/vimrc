" =============================================================================
"       << 判断操作系统是 Windows 还是 Linux 和判断是终端还是 Gvim >>
" =============================================================================

" -----------------------------------------------------------------------------
"  < 判断操作系统是否是 Windows 还是 Linux >
" -----------------------------------------------------------------------------
let g:iswindows = 0
let g:islinux = 0
if(has("win32") || has("win64") || has("win95") || has("win16"))
    let g:iswindows = 1
else
    let g:islinux = 1
endif

" -----------------------------------------------------------------------------
"  < 判断是终端还是 Gvim >
" -----------------------------------------------------------------------------
if has("gui_running")
    let g:isGUI = 1
    "set cut copy paste hotkey
    vmap <C-S-x> "+x
    vmap <C-S-c> "+y
    vmap <C-v> c<ESC>"+p
    imap <C-S-v> <Esc>"+gP
else
    let g:isGUI = 0
    vmap <C-x> "+x
    vmap <C-c> "+y
    vmap <C-v> c<ESC>"+p
    " imap <C-v> <ESC>"+pa
    imap <C-v> <ESC>"+gP
endif


" =============================================================================
"                          << 以下为软件默认配置 >>
" =============================================================================

" -----------------------------------------------------------------------------
"  < Windows Gvim 默认配置> 做了一点修改
" -----------------------------------------------------------------------------
if (g:iswindows && g:isGUI)
    source $VIMRUNTIME/vimrc_example.vim
    source $VIMRUNTIME/mswin.vim
    behave mswin
    set diffexpr=MyDiff()

    function MyDiff()
        let opt = '-a --binary '
        if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
        if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
        let arg1 = v:fname_in
        if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
        let arg2 = v:fname_new
        if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
        let arg3 = v:fname_out
        if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
        let eq = ''
        if $VIMRUNTIME =~ ' '
            if &sh =~ '\<cmd'
                let cmd = '""' . $VIMRUNTIME . '\diff"'
                let eq = '"'
            else
                let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
            endif
        else
            let cmd = $VIMRUNTIME . '\diff'
        endif
        silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
    endfunction
endif

" -----------------------------------------------------------------------------
"  < Linux Gvim/Vim 默认配置> 做了一点修改
" -----------------------------------------------------------------------------
if g:islinux
    set hlsearch        "高亮搜索
    set incsearch       "在输入要搜索的文字时，实时匹配

    " Uncomment the following to have Vim jump to the last position when
    " reopening a file
    if has("autocmd")
        au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
    endif

    if g:isGUI
        " Source a global configuration file if available
        if filereadable("/etc/vim/gvimrc.local")
            source /etc/vim/gvimrc.local
        endif
    else
        " This line should not be removed as it ensures that various options are
        " properly set to work with the Vim-related packages available in Debian.
        runtime! debian.vim

        " Vim5 and later versions support syntax highlighting. Uncommenting the next
        " line enables syntax highlighting by default.
        if has("syntax")
            syntax on
        endif

        set mouse=a                    " 在任何模式下启用鼠标
        set t_Co=256                   " 在终端启用256色
        set backspace=2                " 设置退格键可用

        " Source a global configuration file if available
        if filereadable("/etc/vim/vimrc.local")
            source /etc/vim/vimrc.local
        endif
    endif
endif

"--------------------------------------------------------------------
" enable syntax on in big files
"--------------------------------------------------------------------
autocmd BufReadPre * if getfsize(expand("%")) > 10000000 | syntax off | endif


" =============================================================================
"                          << 以下为用户自定义配置 >>
" =============================================================================

" -----------------------------------------------------------------------------
"  < Vundle 插件管理工具配置 >
" -----------------------------------------------------------------------------
" 用于更方便的管理vim插件，具体用法参考 :h vundle 帮助
" 安装方法为在终端输入如下命令
" git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
" 如果想在 windows 安装就必需先安装 "git for window"，可查阅网上资料

"ssliao
execute pathogen#infect()
filetype plugin  indent on
set nocompatible                                      "禁用 Vi 兼容模式
syntax on
filetype on
"filetype off                                          "禁用文件类型侦测

if g:islinux
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()
    "set rtp+=~/.vim/bundle/vundle/
    "call vundle#rc()
else
    set rtp+=$VIM/vimfiles/bundle/vundle/
    call vundle#rc('$VIM/vimfiles/bundle/')
endif

" 使用Vundle来管理Vundle，这个必须要有。
" Bundle 'gmarik/vundle'

" 以下为要安装或更新的插件，不同仓库都有（具体书写规范请参考帮助）
" Bundle 'a.vim'
" Bundle 'Align'
" Bundle 'jiangmiao/auto-pairs'
" Bundle 'bufexplorer.zip'
" Bundle 'ccvext.vim'
" Bundle 'cSyntaxAfter'
" Bundle 'Yggdroot/indentLine'
" Bundle 'javacomplete'
" Bundle 'vim-javacompleteex'               "更好的 Java 补全插件
" Bundle 'Mark--Karkat'
" Bundle 'fholgado/minibufexpl.vim'         "好像与 Vundle 插件有一些冲突
" Bundle 'Shougo/neocomplcache.vim'
" Bundle 'scrooloose/nerdcommenter'
" Bundle 'scrooloose/nerdtree'
" Bundle 'OmniCppComplete'
" Bundle 'Lokaltog/vim-powerline'
" Bundle 'repeat.vim'
" Bundle 'msanders/snipmate.vim'
" Bundle 'wesleyche/SrcExpl'
" Bundle 'ervandew/supertab'                "有时与 snipmate 插件冲突
" Bundle 'std_c.zip'
" Bundle 'tpope/vim-surround'
" Bundle 'scrooloose/syntastic'
" Bundle 'majutsushi/tagbar'
" Bundle 'taglist.vim'
" Bundle 'TxtBrowser'
" Bundle 'ctrlp.vim'
" Bundle 'ZoomWin'

"snipmate 插件
"Plugin 'MarcWeber/vim-addon-mw-utils'
"Plugin 'tomtom/tlib_vim'
"Plugin 'garbas/vim-snipmate'
"Plugin 'honza/vim-snippets'
"snipmate 插件
" Plugin 'christoomey/vim-tmux-navigator'
" Bundle 'MarcWeber/vim-addon-mw-utils'
" Bundle 'tomtom/tlib_vim'
" Bundle 'garbas/vim-snipmate'
" Bundle 'honza/vim-snippets'
"
" let Vundle manage Vundle, required
"Plugin 'VundleVim/Vundle.vim'


" All of your Plugins must be added before the following line
"call vundle#end()            " required
"filetype plugin indent on    " required

" -----------------------------------------------------------------------------
"  < 编码配置 >
" -----------------------------------------------------------------------------
" 注：使用utf-8格式后，软件与程序源码、文件路径不能有中文，否则报错
set encoding=utf-8                                    "设置gvim内部编码
set fileencoding=utf-8                                "设置当前文件编码
set fileencodings=ucs-bom,utf-8,gbk,cp936,latin-1     "设置支持打开的文件的编码

" 文件格式，默认 ffs=dos,unix
set fileformat=unix                                   "设置新文件的<EOL>格式
set fileformats=unix,dos,mac                          "给出文件的<EOL>格式类型

if (g:iswindows && g:isGUI)
    "解决菜单乱码
    source $VIMRUNTIME/delmenu.vim
    source $VIMRUNTIME/menu.vim

    "解决consle输出乱码
    language messages zh_CN.utf-8
endif

" disable the Press ENTER or type command to continue prompt that appears after executing an external command

" -----------------------------------------------------------------------------
"  < 编写文件时的配置 >
" -----------------------------------------------------------------------------
let g:c_syntax_for_h=1
filetype on                                           "启用文件类型侦测
filetype plugin on                                    "针对不同的文件类型加载对应的插件
filetype plugin indent on                             "启用缩进
set smartindent                                       "启用智能对齐方式
" set expandtab                                         "将Tab键转换为空格
set noexpandtab                                         "no将Tab键转换为空格
set tabstop=8                                         "设置Tab键的宽度
set softtabstop=8
set shiftwidth=8                                      "换行时自动缩进4个空格
" set tw=78
" set ts=8 sw=8 tw=78 ai noexpandtab
set smarttab                                          "指定按一次backspace就删除shiftwidth宽度的空格
set foldenable                                        "启用折叠
set foldmethod=indent                                 "indent 折叠方式
set modifiable
set colorcolumn=80
" set foldmethod=marker                                "marker 折叠方式

" 用空格键来开关折叠
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

" 当文件在外部被修改，自动更新该文件
set autoread

" 常规模式下输入 cS 清除行尾空格
nmap cS :%s/\s\+$//g<CR>:noh<CR>

" 常规模式下输入 cM 清除行尾 ^M 符号
nmap cM :%s/\r$//g<CR>:noh<CR>

set ignorecase                                        "搜索模式里忽略大小写
set smartcase                                         "如果搜索模式包含大写字符，不使用 'ignorecase' 选项，只有在输入搜索模式并且打开 'ignorecase' 选项时才会使用
" set noincsearch                                       "在输入要搜索的文字时，取消实时匹配



" 启用每行超过150列的字符提示（字体变蓝并加下划线），不启用就注释掉
au BufWinEnter * let w:m2=matchadd('Underlined', '\%>' . 120 . 'v.\+', -1)

" -----------------------------------------------------------------------------
"  < 界面配置 >
" -----------------------------------------------------------------------------
set number                                            "显示行号
set relativenumber                                     "显示行号
set laststatus=2                                      "启用状态栏信息
set cmdheight=2                                       "设置命令行的高度为2，默认为1
set cursorline                                        "突出显示当前行
" set guifont=YaHei_Consolas_Hybrid:h12                 "设置字体:字号（字体名称空格用下划线代替）
" set guifont=Mono\ derivative\ Powerline:12
" set guifont= Consolas\ 13
" set guifont=Monospace\ 13
" set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:12
" set guifont=Source_Code_Pro:13
" set guifont=PowerlineSymbols\ for\ Powerline:14
" let Powerline_symbols='compatible'
" set guifont=Monospace\ for\ Powerline:24
set wrap                                               "设置自动换行
set shortmess=atI                                     "去掉欢迎界面

" 设置 gVim 窗口初始位置及大小
if g:isGUI
    " au GUIEnter * simalt ~x                           "窗口启动时自动最大化
    winpos 100 10                                     "指定窗口出现的位置，坐标原点在屏幕左上角
    set lines=38 columns=120                          "指定窗口大小，lines为高度，columns为宽度
endif

" 设置代码配色方案
" if g:isGUI
    " colorscheme Tomorrow-Night-Eighties               "Gvim配色方案
" else
    " colorscheme Tomorrow-Night-Eighties               "终端配色方案
" endif

" 显示/隐藏菜单栏、工具栏、滚动条，可用 Ctrl + F11 切换
if g:isGUI
    set guioptions-=m
    set guioptions-=T
    set guioptions-=r
    set guioptions-=L
    map <silent> <c-F11> :if &guioptions =~# 'm' <Bar>
                \set guioptions-=m <Bar>
                \set guioptions-=T <Bar>
                \set guioptions-=r <Bar>
                \set guioptions-=L <Bar>
                \else <Bar>
                \set guioptions+=m <Bar>
                \set guioptions+=T <Bar>
                \set guioptions+=r <Bar>
                \set guioptions+=L <Bar>
                \endif<CR>
endif

" -----------------------------------------------------------------------------
"  < 单文件编译、连接、运行配置 >
" -----------------------------------------------------------------------------
" 以下只做了 C、C++ 的单文件配置，其它语言可以参考以下配置增加

" F9 一键保存、编译、连接存并运行
map <F9> :call Run()<CR>
imap <F9> <ESC>:call Run()<CR>

" Ctrl + F9 一键保存并编译
map <c-F9> :call Compile()<CR>
imap <c-F9> <ESC>:call Compile()<CR>

" Ctrl + F10 一键保存并连接
" map <c-F10> :call Link()<CR>
" imap <c-F10> <ESC>:call Link()<CR>

let s:LastShellReturn_C = 0
let s:LastShellReturn_L = 0
let s:ShowWarning = 1
let s:Obj_Extension = '.o'
let s:Exe_Extension = '.exe'
let s:Sou_Error = 0

let s:windows_CFlags = 'gcc\ -fexec-charset=gbk\ -Wall\ -g\ -O0\ -c\ %\ -o\ %<.o'
"let s:linux_CFlags = 'gcc\ -Wall\ -g\ -O0\ -c\ %\ -o\ %<.o'
"changed by ssliao
let s:linux_CFlags = 'gcc\ -std=c99\ -Wall\ -g\ -O0\ -c\ %\ -o\ %<.o'

let s:windows_CPPFlags = 'g++\ -fexec-charset=gbk\ -Wall\ -g\ -O0\ -c\ %\ -o\ %<.o'
"let s:linux_CPPFlags = 'g++\ -Wall\ -g\ -O0\ -c\ %\ -o\ %<.o'
"changed by ssliao
let s:linux_CPPFlags = 'g++\ -std=c++14\ -Wall\ -g\ -O0\ -c\ %\ -o\ %<.o'

func! Compile()
    exe ":ccl"
    exe ":update"
    let s:Sou_Error = 0
    let s:LastShellReturn_C = 0
    let Sou = expand("%:p")
    let v:statusmsg = ''
    if expand("%:e") == "c" || expand("%:e") == "cpp" || expand("%:e") == "cxx"
        let Obj = expand("%:p:r").s:Obj_Extension
        let Obj_Name = expand("%:p:t:r").s:Obj_Extension
        if !filereadable(Obj) || (filereadable(Obj) && (getftime(Obj) < getftime(Sou)))
            redraw!
            if expand("%:e") == "c"
                if g:iswindows
                    exe ":setlocal makeprg=".s:windows_CFlags
                else
                    exe ":setlocal makeprg=".s:linux_CFlags
                endif
                echohl WarningMsg | echo " compiling..."
                silent make
            elseif expand("%:e") == "cpp" || expand("%:e") == "cxx"
                if g:iswindows
                    exe ":setlocal makeprg=".s:windows_CPPFlags
                else
                    exe ":setlocal makeprg=".s:linux_CPPFlags
                endif
                echohl WarningMsg | echo " compiling..."
                silent make
            endif
            redraw!
            if v:shell_error != 0
                let s:LastShellReturn_C = v:shell_error
            endif
            if g:iswindows
                if s:LastShellReturn_C != 0
                    exe ":bo cope"
                    echohl WarningMsg | echo " compilation failed"
                else
                    if s:ShowWarning
                        exe ":bo cw"
                    endif
                    echohl WarningMsg | echo " compilation successful"
                endif
            else
                if empty(v:statusmsg)
                    echohl WarningMsg | echo " compilation successful"
                else
                    exe ":bo cope"
                endif
            endif
        else
            echohl WarningMsg | echo ""Obj_Name"is up to date"
        endif
    else
        let s:Sou_Error = 1
        echohl WarningMsg | echo " please choose the correct source file"
    endif
    exe ":setlocal makeprg=make"
endfunc

func! Link()
    call Compile()
    if s:Sou_Error || s:LastShellReturn_C != 0
        return
    endif
    if expand("%:e") == "c" || expand("%:e") == "cpp" || expand("%:e") == "cxx"
        let s:LastShellReturn_L = 0
        let Sou = expand("%:p")
        let Obj = expand("%:p:r").s:Obj_Extension
        if g:iswindows
            let Exe = expand("%:p:r").s:Exe_Extension
            let Exe_Name = expand("%:p:t:r").s:Exe_Extension
        else
            let Exe = expand("%:p:r")
            let Exe_Name = expand("%:p:t:r")
        endif
        let v:statusmsg = ''
        if filereadable(Obj) && (getftime(Obj) >= getftime(Sou))
            redraw!
            if !executable(Exe) || (executable(Exe) && getftime(Exe) < getftime(Obj))
                if expand("%:e") == "c"
                    setlocal makeprg=gcc\ -o\ %<\ %<.o
                    echohl WarningMsg | echo " linking..."
                    silent make
                elseif expand("%:e") == "cpp" || expand("%:e") == "cxx"
                    setlocal makeprg=g++\ -o\ %<\ %<.o
                    echohl WarningMsg | echo " linking..."
                    silent make
                endif
                redraw!
                if v:shell_error != 0
                    let s:LastShellReturn_L = v:shell_error
                endif
                if g:iswindows
                    if s:LastShellReturn_L != 0
                        exe ":bo cope"
                        echohl WarningMsg | echo " linking failed"
                    else
                        if s:ShowWarning
                            exe ":bo cw"
                        endif
                        echohl WarningMsg | echo " linking successful"
                    endif
                else
                    if empty(v:statusmsg)
                        echohl WarningMsg | echo " linking successful"
                    else
                        exe ":bo cope"
                    endif
                endif
            else
                echohl WarningMsg | echo ""Exe_Name"is up to date"
            endif
        endif
        setlocal makeprg=make
    endif
endfunc

func! Run()
    let s:ShowWarning = 0
    call Link()
    let s:ShowWarning = 1
    if s:Sou_Error || s:LastShellReturn_C != 0 || s:LastShellReturn_L != 0
        return
    endif
    let Sou = expand("%:p")
    if expand("%:e") == "c" || expand("%:e") == "cpp" || expand("%:e") == "cxx"
        let Obj = expand("%:p:r").s:Obj_Extension
        if g:iswindows
            let Exe = expand("%:p:r").s:Exe_Extension
        else
            let Exe = expand("%:p:r")
        endif
        if executable(Exe) && getftime(Exe) >= getftime(Obj) && getftime(Obj) >= getftime(Sou)
            redraw!
            echohl WarningMsg | echo " running..."
            if g:iswindows
                exe ":!%<.exe"
            else
                if g:isGUI
                    exe ":!gnome-terminal -x bash -c './%<; echo; echo 请按 Enter 键继续; read'"
                else
                    exe ":!clear; ./%<"
                endif
            endif
            redraw!
            echohl WarningMsg | echo " running finish"
        endif
    endif
endfunc



" -----------------------------------------------------------------------------
"  < 其它配置 >
" -----------------------------------------------------------------------------
set writebackup                             "保存文件前建立备份，保存成功后删除该备份
set nobackup                                "设置无备份文件
" set noswapfile                              "设置无临时文件
set vb t_vb=                                "关闭提示音


" =============================================================================
"                          << 以下为常用插件配置 >>
" =============================================================================

" -----------------------------------------------------------------------------
"  < a.vim 插件配置 >
" -----------------------------------------------------------------------------
" 用于切换C/C++头文件
" :A     ---切换头文件并独占整个窗口
" :AV    ---切换头文件并垂直分割窗口
" :AS    ---切换头文件并水平分割窗口

" -----------------------------------------------------------------------------
"  < Align 插件配置 >
" -----------------------------------------------------------------------------
" 一个对齐的插件，用来——排版与对齐代码，功能强大，不过用到的机会不多

" -----------------------------------------------------------------------------
"  < auto-pairs 插件配置 >
" -----------------------------------------------------------------------------
" 用于括号与引号自动补全，不过会与函数原型提示插件echofunc冲突
" 所以我就没有加入echofunc插件

" -----------------------------------------------------------------------------
"  < BufExplorer 插件配置 >
" -----------------------------------------------------------------------------
" 快速轻松的在缓存中切换（相当于另一种多个文件间的切换方式）
" <Leader>be 在当前窗口显示缓存列表并打开选定文件
" <Leader>bs 水平分割窗口显示缓存列表，并在缓存列表窗口中打开选定文件
" <Leader>bv 垂直分割窗口显示缓存列表，并在缓存列表窗口中打开选定文件

" -----------------------------------------------------------------------------
"  < ccvext.vim 插件配置 >
" -----------------------------------------------------------------------------
" 用于对指定文件自动生成tags与cscope文件并连接
" 如果是Windows系统, 则生成的文件在源文件所在盘符根目录的.symbs目录下(如: X:\.symbs\)
" 如果是Linux系统, 则生成的文件在~/.symbs/目录下
" 具体用法可参考www.vim.org中此插件的说明
" <Leader>sy 自动生成tags与cscope文件并连接 ssliao
" <Leader>sc 连接已存在的tags与cscope文件 ssliao

" -----------------------------------------------------------------------------
"  < cSyntaxAfter 插件配置 >
" -----------------------------------------------------------------------------
" 高亮括号与运算符等
au! BufRead,BufNewFile,BufEnter *.{c,cpp,h,java,javascript} call CSyntaxAfter()

" -----------------------------------------------------------------------------
"  < indentLine 插件配置 >
" -----------------------------------------------------------------------------
" 用于显示对齐线，与 indent_guides 在显示方式上不同，根据自己喜好选择了
" 在终端上会有屏幕刷新的问题，这个问题能解决有更好了
" 开启/关闭对齐线
let g:indentLine_color_term = 239
nmap <leader>il :IndentLinesToggle<CR>

" 设置Gvim的对齐线样式
if g:isGUI
    let g:indentLine_char = "┊"
    let g:indentLine_first_char = "┊"
endif

" 设置终端对齐线颜色，如果不喜欢可以将其注释掉采用默认颜色
let g:indentLine_color_term = 239

" 设置 GUI 对齐线颜色，如果不喜欢可以将其注释掉采用默认颜色
" let g:indentLine_color_gui = '#A4E57E'

" -----------------------------------------------------------------------------
"  < Mark--Karkat（也就是 Mark） 插件配置 >
" -----------------------------------------------------------------------------
" 给不同的单词高亮，表明不同的变量时很有用，详细帮助见 :h mark.txt

" " -----------------------------------------------------------------------------
" "  < MiniBufExplorer 插件配置 >
" " -----------------------------------------------------------------------------
" " 快速浏览和操作Buffer
" " 主要用于同时打开多个文件并相与切换

" let g:miniBufExplMapWindowNavArrows = 1     "用Ctrl加方向键切换到上下左右的窗口中去
" let g:miniBufExplMapWindowNavVim = 1        "用<C-k,j,h,l>切换到上下左右的窗口中去
" let g:miniBufExplMapCTabSwitchBufs = 1      "功能增强（不过好像只有在Windows中才有用）
" "                                            <C-Tab> 向前循环切换到每个buffer上,并在但前窗口打开
" "                                            <C-S-Tab> 向后循环切换到每个buffer上,并在当前窗口打开

" 在不使用 MiniBufExplorer 插件时也可用<C-k,j,h,l>切换到上下左右的窗口中去
noremap <c-k> <c-w>k
noremap <c-j> <c-w>j
noremap <c-h> <c-w>h
noremap <c-l> <c-w>l
"------------------------------------------------------------------------------
" Ctrl + K 插入模式下光标向上移动
imap <c-k> <Up>

" Ctrl + J 插入模式下光标向下移动
imap <c-j> <Down>

" Ctrl + H 插入模式下光标向左移动
imap <c-h> <Left>

" Ctrl + L 插入模式下光标向右移动
imap <c-l> <Right>



" -----------------------------------------------------------------------------
"  < nerdcommenter 插件配置 >
" -----------------------------------------------------------------------------
" 我主要用于C/C++代码注释(其它的也行)         ssliao
" 以下为插件默认快捷键，其中的说明是以C/C++为例的，其它语言类似
" <Leader>ci 以每行一个 /* */ 注释选中行(选中区域所在行)，再输入则取消注释
" <Leader>cm 以一个 /* */ 注释选中行(选中区域所在行)，再输入则称重复注释
" <Leader>cc 以每行一个 /* */ 注释选中行或区域，再输入则称重复注释
" <Leader>cu 取消选中区域(行)的注释，选中区域(行)内至少有一个 /* */
" <Leader>ca 在/*...*/与//这两种注释方式中切换（其它语言可能不一样了）
" <Leader>cA 行尾注释
let mapleader=","                           "<Leader>更改为，按键
let NERDSpaceDelims = 1                     "在左注释符之后，右注释符之前留有空格
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
" let g:NERDCustomDelimiters = { 'c': { 'left': '/*','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" -----------------------------------------------------------------------------
"  < nerdtree 插件配置 >
" -----------------------------------------------------------------------------
" 有目录村结构的文件浏览插件

" 常规模式下输入 F2 调用插件
nmap <F2> :NERDTreeToggle .<CR>
let NERDTreeShowBookmarks = 1
"显示隐藏文件，shift+i可切换
" let NERDTreeShowHidden=1
" 设置文件过滤器
" let NERDTreeIgnore = ['\.o$']
" let NERDTreeIgnore=['\.vim$', '\~$']
" This will cause all dirs ending in ".d" to be ignored and all files ending  in ".o" to be ignored
" let NERDTreeIgnore=['.d$[[dir]]', '.o$[[file]]']
" 忽略一些文件的显示
" let NERDTreeIgnore=['\.pyc','\~$','\.swp']
" let NERDTreeIgnore=['.swp$[[file]]', '.o$[[file]]','\.pyc','\~$','\.swp']
let NERDTreeIgnore=['\.swp', '\.o','\.pyc','\~$','\.swp']
let NERDTreeShowLineNumbers = 1
autocmd FileType nerdtree nmap <buffer> <CR> go

" -----------------------------------------------------------------------------
"  Show function name
" -----------------------------------------------------------------------------
fun! ShowFuncName()
  let lnum = line(".")
  let col = col(".")
  echohl ModeMsg
  echo getline(search("^[^ \t#/]\\{2}.*[^:]\s*$", 'bW'))
  echohl None
  call search("\\%" . lnum . "l" . "\\%" . col . "c")
endfun
map <leader>sf :call ShowFuncName() <CR>


" -----------------------------------------------------------------------------
"  < nerdtree-git-plugin 插件配置 >
" -----------------------------------------------------------------------------

let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "≛",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔",
    \ "Unknown"   : "?"
    \ }


" -----------------------------------------------------------------------------
"  < nerdtree-tab-plugin 插件配置 >
" -----------------------------------------------------------------------------
" 关闭NERDTree快捷键
" map <leader>t :NERDTreeToggle<CR>
" 显示行号
" let NERDTreeShowLineNumbers=1
let NERDTreeAutoCenter=1
" 是否显示隐藏文件
" let NERDTreeShowHidden=1
" 设置宽度
" let NERDTreeWinSize=31
" 在终端启动vim时，共享NERDTree
" let g:nerdtree_tabs_open_on_console_startup=1
" 显示书签列表
" let NERDTreeShowBookmarks=1

" -----------------------------------------------------------------------------
"  < omnicppcomplete 插件配置 >
" -----------------------------------------------------------------------------
" 用于C/C++代码补全，这种补全主要针对命名空间、类、结构、共同体等进行补全，详细
" 说明可以参考帮助或网络教程等
" 使用前先执行如下 ctags 命令（本配置中可以直接使用 ccvext 插件来执行以下命令）
" ctags -R --c++-kinds=+p --fields=+iaS --extra=+q
" 我使用上面的参数生成标签后，对函数使用跳转时会出现多个选择
" 所以我就将--c++-kinds=+p参数给去掉了，如果大侠有什么其它解决方法希望不要保留呀
" 下面由ssliao修改
"map <C-F4> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
"nmap <F4> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q -f ~/.vim/tags/tags_self<CR>
"set tags+=~/.vim/tags/tags_self
" nmap <F4> :cs add ./cscope.out .<CR><CR><CR> :cs reset<CR>
nmap <F4> :Autoformat<CR>
" nmap <F5> :PymodeLintAuto<CR>
nnoremap <F5> :%!xxd<CR>
nnoremap <c-F5> :%!xxd -r<CR>
set completeopt=menu                        "关闭预览窗口

" -----------------------------------------------------------------------------
"  < powerline 插件配置 >
" -----------------------------------------------------------------------------
" 状态栏插件，更好的状态栏效果

" -----------------------------------------------------------------------------
"  < repeat 插件配置 >
" -----------------------------------------------------------------------------
" 主要用"."命令来重复上次插件使用的命令

" -----------------------------------------------------------------------------
"  < snipMate 插件配置 >
" -----------------------------------------------------------------------------
" 用于各种代码补全，这种补全是一种对代码中的词与代码块的缩写补全，详细用法可以参
" 考使用说明或网络教程等。不过有时候也会与 supertab 插件在补全时产生冲突，如果大
" 侠有什么其它解决方法希望不要保留呀

" -----------------------------------------------------------------------------
"  < SrcExpl 插件配置 >
" -----------------------------------------------------------------------------
" 增强源代码浏览，其功能就像Windows中的"Source Insight"
nmap <F3> :SrcExplToggle<CR>                "打开/闭浏览窗口
" // The switch of the Source Explorer
" nmap <F8> :SrcExplToggle<CR>

" // Set the height of Source Explorer window
let g:SrcExpl_winHeight = 8

" // Set 100 ms for refreshing the Source Explorer
let g:SrcExpl_refreshTime = 100

" // Set "Enter" key to jump into the exact definition context
let g:SrcExpl_jumpKey = "<ENTER>"

" // Set "Space" key for back from the definition context
let g:SrcExpl_gobackKey = "<SPACE>"

" // In order to avoid conflicts, the Source Explorer should know what plugins
" // except itself are using buffers. And you need add their buffer names into
" // below listaccording to the command ":buffers!"
" let g:SrcExpl_pluginList = [
"         \ "__Tag_List__",
"         \ "_NERD_tree_"
"     \ ]
let g:SrcExpl_pluginList = [
        \ "Tagbar",
        \ "_NERD_tree_",
        \ "*unite*"
    \ ]
"
" // Enable/Disable the local definition searching, and note that this is not
" // guaranteed to work, the Source Explorer doesn't check the syntax for now.
" // It only searches for a match with the keyword according to command 'gd'
let g:SrcExpl_searchLocalDef = 1

" // Do not let the Source Explorer update the tags file when opening
let g:SrcExpl_isUpdateTags = 0

" // Use 'Exuberant Ctags' with '--sort=foldcase -R .' or '-L cscope.files' to
" // create/update the tags file
let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ."

" // Set "<F12>" key for updating the tags file artificially
" let g:SrcExpl_updateTagsKey = "<F12>"

" // Set "<F3>" key for displaying the previous definition in the jump list
" let g:SrcExpl_prevDefKey = "<F3>"

" // Set "<F4>" key for displaying the next definition in the jump list
" let g:SrcExpl_nextDefKey = "<F4>"
"
"
"

" -----------------------------------------------------------------------------
"  < supertab 插件配置 >
" -----------------------------------------------------------------------------
" 我主要用于配合 omnicppcomplete 插件，在按 Tab 键时自动补全效果更好更快
" let g:supertabdefaultcompletiontype = "<c-x><c-u>"

" -----------------------------------------------------------------------------
"  < std_c 插件配置 >
" -----------------------------------------------------------------------------
" 用于增强C语法高亮

" 启用 // 注视风格
let c_cpp_comments = 0

" -----------------------------------------------------------------------------
"  < surround 插件配置 >
" -----------------------------------------------------------------------------
" 快速给单词/句子两边增加符号（包括html标签），缺点是不能用"."来重复命令
" 不过 repeat 插件可以解决这个问题，详细帮助见 :h surround.txt

" -----------------------------------------------------------------------------
"  < Syntastic 插件配置 >
" -----------------------------------------------------------------------------
let g:syntastic_check_on_open = 1
let g:syntastic_cpp_include_dirs = ['/usr/include/']
let g:syntastic_cpp_remove_include_errors = 1
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = '-std=c++11 -stdlib=libstdc++'
"set error or warning signs
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'
""whether to show balloons
let g:syntastic_enable_balloons = 1
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_wq = 0

" 用于保存文件时查检语法

" -----------------------------------------------------------------------------
"  < Tagbar 插件配置 >
" -----------------------------------------------------------------------------
" 相对 TagList 能更好的支持面向对象

" 常规模式下输入 tt 调用插件，如果有打开 TagList 窗口则先将其关闭 //ssliao
nmap tt :TlistClose<CR>:TagbarToggle<CR>

let g:tagbar_width=20                       "设置窗口宽度
let g:tagbar_left=1                         "在右侧窗口中显示
"let g:tagbar_right=1                         "在右侧窗口中显示

" -----------------------------------------------------------------------------
"  < TagList 插件配置 >
" -----------------------------------------------------------------------------
" 高效地浏览源码, 其功能就像vc中的workpace
" 那里面列出了当前文件中的所有宏,全局变量, 函数名等

" 常规模式下输入 tl 调用插件，如果有打开 Tagbar 窗口则先将其关闭
nmap tl :TagbarClose<CR>:Tlist<CR>

let Tlist_Show_One_File=1                   "只显示当前文件的tags
let Tlist_Enable_Fold_Column=0              "使taglist插件不显示左边的折叠行
let Tlist_Exit_OnlyWindow=1                 "如果Taglist窗口是最后一个窗口则退出Vim
let Tlist_File_Fold_Auto_Close=1            "自动折叠
let Tlist_WinWidth=25                       "设置窗口宽度
"let Tlist_Use_Right_Window=1                "在右侧窗口中显示
let Tlist_Use_Left_Window=1                "在左侧窗口中显示

" -----------------------------------------------------------------------------
"  < txtbrowser 插件配置 >
" -----------------------------------------------------------------------------
" 用于文本文件生成标签与与语法高亮（调用TagList插件生成标签，如果可以）
au BufRead,BufNewFile *.txt setlocal ft=txt

" -----------------------------------------------------------------------------
"  < ZoomWin 插件配置 >
" -----------------------------------------------------------------------------
" 用于分割窗口的最大化与还原
" 常规模式下按快捷键 <c-w>o 在最大化与还原间切换

" =============================================================================
"                          << 以下为常用工具配置 >>
" =============================================================================

" -----------------------------------------------------------------------------
"  < cscope 工具配置 >
" -----------------------------------------------------------------------------
" 用Cscope自己的话说 - "你可以把它当做是超过频的ctags"
if has("cscope")
    "设定可以使用 quickfix 窗口来查看 cscope 结果
    set cscopequickfix=s-,c-,d-,i-,t-,e-
    "使支持用 Ctrl+]  和 Ctrl+t 快捷键在代码间跳转
    set cscopetag
    "如果你想反向搜索顺序设置为1
    set csto=0
    "在当前目录中添加任何数据库
    if filereadable("cscope.out")
        cs add cscope.out
        "否则添加数据库环境中所指出的
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
    set cscopeverbose
    "快捷键设置
    nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
endif
" The cscope prefix key.
nnoremap    [cscope]   <Nop>
nmap 1  [cscope]
noremap [cscope]f : cs f f
noremap [cscope]e : cs f e
noremap [cscope]g : cs f g
noremap [cscope]t : cs f t
noremap [cscope]i : cs f i
noremap [cscope]d : cs f d
noremap [cscope]s : cs f s
noremap [cscope]c : cs f c


" -----------------------------------------------------------------------------
"  < ctags 工具配置 >
" -----------------------------------------------------------------------------
" 对浏览代码非常的方便,可以在函数,变量之间跳转等
set tags=./tags;                            "向上级目录递归查找tags文件（好像只有在Windows下才有用）
noremap tn : tn<CR>
noremap tp : tp<CR>

" -----------------------------------------------------------------------------
"  < gvimfullscreen 工具配置 > 请确保已安装了工具
" -----------------------------------------------------------------------------
" 用于 Windows Gvim 全屏窗口，可用 F11 切换
" 全屏后再隐藏菜单栏、工具栏、滚动条效果更好
if (g:iswindows && g:isGUI)
    map <F11> <Esc>:call libcallnr("gvimfullscreen.dll", "ToggleFullScreen", 0)<CR>
endif

" -----------------------------------------------------------------------------
"  < vimtweak 工具配置 > 请确保以已装了工具
" -----------------------------------------------------------------------------
" 这里只用于窗口透明与置顶
" 常规模式下 Ctrl + Up（上方向键） 增加不透明度，Ctrl + Down（下方向键） 减少不透明度，<Leader>t 窗口置顶与否切换
if (g:iswindows && g:isGUI)
    let g:Current_Alpha = 255
    let g:Top_Most = 0
    func! Alpha_add()
        let g:Current_Alpha = g:Current_Alpha + 10
        if g:Current_Alpha > 255
            let g:Current_Alpha = 255
        endif
        call libcallnr("vimtweak.dll","SetAlpha",g:Current_Alpha)
    endfunc
    func! Alpha_sub()
        let g:Current_Alpha = g:Current_Alpha - 10
        if g:Current_Alpha < 155
            let g:Current_Alpha = 155
        endif
        call libcallnr("vimtweak.dll","SetAlpha",g:Current_Alpha)
    endfunc
    func! Top_window()
        if  g:Top_Most == 0
            call libcallnr("vimtweak.dll","EnableTopMost",1)
            let g:Top_Most = 1
        else
            call libcallnr("vimtweak.dll","EnableTopMost",0)
            let g:Top_Most = 0
        endif
    endfunc

    "快捷键设置
    map <c-up> :call Alpha_add()<CR>
    map <c-down> :call Alpha_sub()<CR>
    map <leader>t :call Top_window()<CR>
endif

" =============================================================================
"                          << 以下为常用自动命令配置 >>
" =============================================================================

" 自动切换目录为当前编辑文件所在目录
au BufRead,BufNewFile,BufEnter * cd %:p:h

" =============================================================================
"                     << windows 下解决 Quickfix 乱码问题 >>
" =============================================================================
" windows 默认编码为 cp936，而 Gvim(Vim) 内部编码为 utf-8，所以常常输出为乱码
" 以下代码可以将编码为 cp936 的输出信息转换为 utf-8 编码，以解决输出乱码问题
" 但好像只对输出信息全部为中文才有满意的效果，如果输出信息是中英混合的，那可能
" 不成功，会造成其中一种语言乱码，输出信息全部为英文的好像不会乱码
" 如果输出信息为乱码的可以试一下下面的代码，如果不行就还是给它注释掉

" if g:iswindows
"     function QfMakeConv()
"         let qflist = getqflist()
"         for i in qflist
"            let i.text = iconv(i.text, "cp936", "utf-8")
"         endfor
"         call setqflist(qflist)
"      endfunction
"      au QuickfixCmdPost make call QfMakeConv()
" endif

" =============================================================================
"                          << 其它 >>
" =============================================================================

" 注：上面配置中的"<Leader>"在本软件中设置为"\"键（引号里的反斜杠），如<Leader>t
" 指在常规模式下按"\"键加"t"键，这里不是同时按，而是先按"\"键后按"t"键，间隔在一
" 秒内，而<Leader>cs是先按"\"键再按"c"又再按"s"键

"let mapleader=","                           "<Leader>更改为，按键
" let g:miniBufExplorerMoreThanOne=0
" let g:miniBufExplCloseOnSelect = 1
map <Leader>mc :MBEClose<cr>       "disable MiniBufExplorer
map <Leader>mo :MBEOpen<cr>        "enable MiniBufExplorer
" let g:miniBufExplHideWhenDiff = 1
" let g:miniBufExplorerAutoStart = 0  "disable MiniBufExplorer autostart
"-- WinManager setting --
let g:winManagerWindowLayout='FileExplorer|TagList' " 设置我们要管理的插件
let g:persistentBehaviour=0 " 如果所有编辑文件都关闭了，退出vim
nmap wm :WMToggle<cr>



"/* 当新建 .h .c .hpp .cpp 等文件时自动调用SetTitle 函数*/
"autocmd BufNewFile *.[ch],*.hpp,*.cpp exec ":call SetTitle()"

"/* 加入注释 */
" func SetComment()
"     call setline(1,"/*==================================")
"    call append(line("."),   "*   Copyright (C) ".strftime("%Y")." All rights reserved.")
"    call append(line(".")+1, "*   ")
"    call append(line(".")+2, "*   文件名称：".expand("%:t"))
"    call append(line(".")+3, "*   创 建 者：herb")
"    call append(line(".")+4, "*   创建日期：".strftime("%Y年%m月%d日"))
"    call append(line(".")+5, "*   描    述：")
"    call append(line(".")+6, "*")
"    call append(line(".")+7, "================================================================*/")
" endfunc

"/* 定义函数SetTitle，自动插入文件头 */
"func SetTitle()
"     call SetComment()
"     if expand("%:e") == 'hpp'
"  call append(line(".")+8, "#ifndef _".toupper(expand("%:t:r"))."_H")
"  call append(line(".")+9, "#define _".toupper(expand("%:t:r"))."_H")
"  call append(line(".")+10, "#ifdef __cplusplus")
"  call append(line(".")+11, "extern \"C\"")
"  call append(line(".")+12, "{")
"  call append(line(".")+13, "#endif")
"  call append(line(".")+14, "")
" call append(line(".")+15, "#ifdef __cplusplus")
" call append(line(".")+16, "}")
" call append(line(".")+17, "#endif")
" call append(line(".")+18, "#endif //".toupper(expand("%:t:r"))."_H")
"    elseif expand("%:e") == 'h'
" call append(line(".")+8, "#pragma once")
"    elseif &filetype == 'c'
" call append(line(".")+8,"#include \"".expand("%:t:r").".h\"")
"    elseif &filetype == 'cpp'
" call append(line(".")+8, "#include \"".expand("%:t:r").".h\"")
"    endif
"endfunc

set novb ""消除闪烁
"------------------------------------------------------------------------------------
"		ctrlp
"------------------------------------------------------------------------------------
let g:ctrlp_map = '<leader><leader>'
let g:ctrlp_open_multiple_files = 'f'
" let g:ctrlp_cmd = 'CtrlP'
" map <leader>f :CtrlPMRU<CR>
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
            \ 'file': '\v\.(log|jpg|png|zip|tar|tar.gz|pyc)$',
            \ }
" let g:ctrlp_working_path_mode=0
" let g:ctrlp_match_window_bottom=1
" let g:ctrlp_max_height=15
" let g:ctrlp_match_window_reversed=0
" let g:ctrlp_mruf_max=500
" let g:ctrlp_follow_symlinks=1
set  rtp+=/usr/lib/python3.5/site-packages/powerline/bindings/vim/
let g:Powerline_symbols= "fancy"
" setfillchars+=stl:\ ,stlnc:\
" let g:minBufExplForceSyntaxEnable = 1
" python from powerline.vim import setup as powerline_setup
" python powerline_setup()
" python del powerline_setup

if ! has('gui_running')
    set ttimeoutlen=10
    augroup FastEscape
        autocmd!
        au InsertEnter * set timeoutlen=0
        au InsertLeave * set timeoutlen=1000
    augroup END
endif

" set laststatus=2 " Always display the statusline in all windows
" set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline)
" Bundle 'powerline/powerline'
set guifont=Liberation\ Mono\ for\ Powerline\ 12
" set guifont=DejaVu\ Sans:s12
"----------------------------------------------------------
" air-line setings
"----------------------------------------------------------
let g:airline_powerline_fonts = 1
" let g:airline#extensions#tabline#enabled = 1
" let g:airline#extensions#hunks#enabled = 0

" function! AccentDemo()
  " let keys = ['a','b','c','d','e','f','g','h']
  " for k in keys
    " call airline#parts#define_text(k, k)
  " endfor
  " call airline#parts#define_accent('a', 'red')
  " call airline#parts#define_accent('b', 'green')
  " call airline#parts#define_accent('c', 'blue')
  " call airline#parts#define_accent('d', 'yellow')
  " call airline#parts#define_accent('e', 'orange')
  " call airline#parts#define_accent('f', 'purple')
  " call airline#parts#define_accent('g', 'bold')
  " call airline#parts#define_accent('h', 'italic')
  " let g:airline_section_a = airline#section#create(keys)
" endfunction
" autocmd VimEnter * call AccentDemo()
"
" let g:airline_detect_whitespace=0
let g:airline#extensions#whitespace#enabled = 0
" let g:airline_section_z='%3p%% %#__accent_italic#%#__accent_yellow#%4l%#__restore__#:%3v'
" let g:airline_section_y="%{strlen(&fenc)>0?&fenc:''}%{strlen(&ff)>0?'['.&ff.']':''}%{airline#extensions#whitespace#check()} %#warningmsg#%{SyntasticStatuslineFlag()}"
" let g:airline_section_warning=""

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
    endif

" unicode symbols
" let g:airline_left_sep = '»'
" let g:airline_left_sep = '▶'
" let g:airline_right_sep = '«'
" let g:airline_right_sep = '◀'
" let g:airline_symbols.linenr = '␊'
" let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
" let g:airline_symbols.branch = '⎇'
" let g:airline_symbols.paste = 'ρ'
" let g:airline_symbols.paste = 'Þ'
" let g:airline_symbols.paste = '∥'
" let g:airline_symbols.whitespace = 'Ξ'

"" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
" let g:airline_theme='powerlineish'

" let g:airline_theme='badwolf'
set fenc=
" let g:airline_section_b = '%{strftime("%T")}'
" let g:airline_section_b = 'branch'
" let g:airline_section_b = '%{getcwd()}'
" let g:airline_section_y = 'BN: %{bufnr("%")}'
set list
set listchars=tab:•\ ,trail:•,extends:»,precedes:« " Unprintable chars mapping"
let g:indentLine_char = '¦'
" set listchars=tab:>-
"---------------------------------------------------------------
"indentLine配置
"---------------------------------------------------------------
" Vim
" let g:indentLine_color_term = 239
"GVim
" let g:indentLine_color_gui = '#A4E57E'
let g:indentLine_color_gui = '#7c8473'
" none X terminal
" let g:indentLine_color_tty_light = 7 " (default: 4)
" let g:indentLine_color_dark = 1 " (default: 2)

"---------------------------------------------------------------
"vim-run配置
"---------------------------------------------------------------
let g:vim_run_command_map = {
  \'javascript': 'node',
  \'php': 'php',
  \'python': 'python',
  \'c': 'c',
  \'cpp': 'cpp',
  \}


"---------------------------------------------------------------
"Denite.vim settings
"---------------------------------------------------------------
nnoremap    [Denite]   <Nop>
nmap 7  [Denite]
nnoremap <silent>[Denite]f :Denite file/rec<CR>

"---------------------------------------------------------------
"unite.vim settings
"---------------------------------------------------------------
" 打开颜色会出错
" let g:unite_source_output_shellcmd_colors = 1

" inoremap <silent><buffer><expr> <C-s> unite#do_action('split')
" inoremap <silent><buffer><expr> <C-v> unite#do_action('vsplit')

" The unit prefix key.
nnoremap    [unite]   <Nop>
nmap 9  [unite]

"disable pagedown and pageup
nnoremap <leader>f :Unite file_rec/async<cr>

let g:unite_source_history_yank_enable = 1
nnoremap <space>y :Unite history/unite<cr>
nnoremap <leader>s :Unite -quick-match buffer<cr>

" nnoremap <silent>[menu]g :Unite -silent -start-insert menu:git<CR>
" nnoremap <silent>[unite]g :Unite -silent -start-insert menu:git<CR>
nnoremap <silent>[unite]s :Unite output/shellcmd<CR>
nnoremap <silent>[unite]f :Unite -silent file_mru<CR>
nnoremap <silent><Leader>f :Unite -silent -start-insert file_rec/async<CR>
nnoremap <silent><space>f :Unite -silent file<CR>
nnoremap <silent><space>d :Unite -silent directory<CR>
nnoremap <silent>[unite]j :Unite -silent -start-insert jump<CR>
nnoremap <silent>[unite]a :Unite -silent  -vertical history/yank<CR>
nnoremap <silent>[unite]o :Unite file:../
nnoremap <silent>[unite]d :Unite -silent -start-insert directory_mru<CR>
nnoremap <leader>B :UniteBookmarkAdd<CR>
nnoremap <leader>b :Unite buffer bookmark<CR>
nnoremap <silent>[unite]b :Unite bookmark:*<CR>
" nnoremap <silent>[unite]bf :UniteTodoAddBuffer<CR>

let g:unite_source_menu_menus = get(g:,'unite_source_menu_menus',{})
let g:unite_source_menu_menus.git = {
    \ 'description' : '            gestionar repositorios git
        \                            ⌘ [espacio]g',
    \}
let g:unite_source_menu_menus.git.command_candidates = [
    \['▷ tig                                                        ⌘ ,gt',
        \'normal ,gt'],
    \['▷ git status       (Fugitive)                                ⌘ ,gs',
        \'Gstatus'],
    \['▷ git diff         (Fugitive)                                ⌘ ,gd',
        \'Gdiff'],
    \['▷ git commit       (Fugitive)                                ⌘ ,gc',
        \'Gcommit'],
    \['▷ git log          (Fugitive)                                ⌘ ,gl',
        \'exe "silent Glog | Unite quickfix"'],
    \['▷ git blame        (Fugitive)                                ⌘ ,gb',
        \'Gblame'],
    \['▷ git stage        (Fugitive)                                ⌘ ,gw',
        \'Gwrite'],
    \['▷ git checkout     (Fugitive)                                ⌘ ,go',
        \'Gread'],
    \['▷ git rm           (Fugitive)                                ⌘ ,gr',
        \'Gremove'],
    \['▷ git mv           (Fugitive)                                ⌘ ,gm',
        \'exe "Gmove " input("destino: ")'],
    \['▷ git push         (Fugitive, salida por buffer)             ⌘ ,gp',
        \'Git! push'],
    \['▷ git pull         (Fugitive, salida por buffer)             ⌘ ,gP',
        \'Git! pull'],
    \['▷ git prompt       (Fugitive, salida por buffer)             ⌘ ,gi',
        \'exe "Git! " input("comando git: ")'],
    \['▷ git cd           (Fugitive)',
        \'Gcd'],
    \]
nnoremap <silent>[unite]m :Unite -silent -start-insert menu:git<CR>
"---------------------------------------------------------------
"end of unite.vim settings
"---------------------------------------------------------------

"---------------------------------------------------------------
"unite-git-log settings
"---------------------------------------------------------------
nnoremap <silent>[unite]g :Unite -silent  -vertical gitlog:all<CR>
nnoremap <silent>[unite]l :Unite -silent  -vertical gitlog<CR>
let g:unite_source_gitlog_default_opts = '--graph --color=auto --pretty=format:''%h -%d %s (%cr) <%an>'' --abbrev-commit --date=relative'
"---------------------------------------------------------------
"unite-giti-vim settings
"---------------------------------------------------------------
nnoremap <space>b :Unite giti/branch_all<cr>
nnoremap <space>s :Unite giti/status<cr>
nnoremap <space>ci :Git ci<cr>
nnoremap <space>di :Git diff<cr>
nnoremap <space>pp :Git push origin
nnoremap <space>r :Git remote -v<cr>

"---------------------------------------------------------------
"vim-bbye settings
"---------------------------------------------------------------
nnoremap <Leader>q :Bdelete<CR>
nnoremap <Leader>qa :qa<CR>
nnoremap <Leader>qi :q!<CR>
nnoremap <Leader>qq :q<CR>
nnoremap <Leader>ww :w<CR>
nnoremap <Leader>wq :wq<CR>
nnoremap <Leader>ti <Esc>:r! date "+\%Y-\%m-\%d \%H:\%M:\%S"<CR>
nnoremap <Leader>ff <Esc>:Files<CR>
" nnoremap <C-s> : <ESC> :wq<CR>
" 回到最初的状态，撤销所有修改
" nnoremap <A-u> :u1000<CR> " not work
"ctrl+i 设置为esc
imap <C-e> <Esc>

"---------------------------------------------------------------
"cscope and nerdtree settings
"---------------------------------------------------------------
nnoremap <space>m :Bookmark

nnoremap <space>c :cscope add ~/.cscope/projects/


"在插入模式,设置ctrl+\为退出文件 :
map! <C-\> <ESC>:q<CR>


"start deoplete plugin -- 补全插件
" let g:deoplete#enable_at_startup = 1
"
"---------------------------------------------------------------
"tmux settings
"---------------------------------------------------------------
" let g:tmux_navigator_save_on_switch = 1
"
"---------------------------------------------------------------
"vim-easymotion v3.0 settings
"---------------------------------------------------------------
" <Leader>f{char} to move to {char}
map  <Leader>F <Plug>(easymotion-bd-f)
nmap <Leader>F <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)

" Move to line
map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)

" Move to word
map  <Leader>W <Plug>(easymotion-bd-w)
nmap <Leader>W <Plug>(easymotion-overwin-w)

" You can use other keymappings like <C-l> instead of <CR> if you want to
" use these mappings as default search and somtimes want to move cursor with
" EasyMotion.
function! s:incsearch_config(...) abort
  return incsearch#util#deepextend(deepcopy({
  \   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
  \   'keymap': {
  \     "\<CR>": '<Over>(easymotion)'
  \   },
  \   'is_expr': 0
  \ }), get(a:, 1, {}))
endfunction

noremap <silent><expr> /  incsearch#go(<SID>incsearch_config())
noremap <silent><expr> ?  incsearch#go(<SID>incsearch_config({'command': '?'}))
noremap <silent><expr> g/ incsearch#go(<SID>incsearch_config({'is_stay': 1}))

"---------------------------------------------------------------
"vim-easymotion settings
"---------------------------------------------------------------
" 更改快捷键
" let g:EasyMotion_leader_key = 'f'

" ff 全屏搜索
" fs 往下搜索
" fF 往上搜索
" fl 行内向右搜索
" fj 行间向下搜索
" fk 行间向上搜索
" fh 行内向左搜索
" fb 往上搜索一个单词开始处
" fge 往上搜索一个单词结尾处
" fe 往下搜索一个单词结尾处
" fw 往下搜索一个单词开始处
map f <Plug>(easymotion-prefix)
map ff <Plug>(easymotion-s)
map fs <Plug>(easymotion-f)
map fl <Plug>(easymotion-lineforward)
map fj <Plug>(easymotion-j)
map fk <Plug>(easymotion-k)
map fh <Plug>(easymotion-linebackward)
" 忽略大小写
let g:EasyMotion_smartcase = 1
"---------------------------------------------------------------
"vim-easymotion settings
"---------------------------------------------------------------
" map /  <Plug>(incsearch-forward)
" map ?  <Plug>(incsearch-backward)
" map g/ <Plug>(incsearch-stay)

let g:incsearch#auto_nohlsearch = 1
" map n  <Plug>(incsearch-nohl-n)
" map N  <Plug>(incsearch-nohl-N)
" map *  <Plug>(incsearch-nohl-*)
" map #  <Plug>(incsearch-nohl-#)
" map g* <Plug>(incsearch-nohl-g*)
" map g# <Plug>(incsearch-nohl-g#)

" map z/ <Plug>(incsearch-easymotion-/)
" map z? <Plug>(incsearch-easymotion-?)
" map zg/ <Plug>(incsearch-easymotion-stay)

" map / <Plug>(incsearch-easymotion-/)
" map ? <Plug>(incsearch-easymotion-?)
" map g/ <Plug>(incsearch-easymotion-stay)

map f/ <Plug>(incsearch-fuzzy-/)
map f? <Plug>(incsearch-fuzzy-?)
map fg/ <Plug>(incsearch-fuzzy-stay)


" map z/ <Plug>(incsearch-fuzzyspell-/)
" map z? <Plug>(incsearch-fuzzyspell-?)
" map zg/ <Plug>(incsearch-fuzzyspell-stay)

"
function! s:config_easyfuzzymotion(...) abort
    return extend(copy({
    \   'converters': [
    \     incsearch#config#fuzzy#converter(),
    \   ],
    \   'modules': [incsearch#config#easymotion#module()],
    \   'keymap': {"\<CR>": '<Over>(easymotion)'},
    \   'is_expr': 0,
    \   'is_stay': 1
    \ }), get(a:, 1, {}))
endfunction

noremap <silent><expr> <Space>/ incsearch#go(<SID>config_easyfuzzymotion())

function! s:config_fuzzyall(...) abort
  return extend(copy({
  \   'converters': [
  \     incsearch#config#fuzzy#converter(),
  \     incsearch#config#fuzzyspell#converter()
  \   ],
  \ }), get(a:, 1, {}))
endfunction

noremap <silent><expr> e/ incsearch#go(<SID>config_fuzzyall())
noremap <silent><expr> e? incsearch#go(<SID>config_fuzzyall({'command': '?'}))
noremap <silent><expr> eg? incsearch#go(<SID>config_fuzzyall({'is_stay': 1}))

" -------------------------------------------------------------------
"unite-colorscheme.vim settings
" -------------------------------------------------------------------
"Disable following theme
" let g:unite_colorscheme_blacklist = [
            " \ 'blue', 'darkblue', 'delek', 'evening',
            " \ 'desert', 'elflord', 'koehler', 'morning',
            " \ 'murphy', 'pablo', 'peachpuff', 'ron',
            " \ 'slate', 'torte', 'zellner' ]

let g:unite_colorscheme_blacklist = [
            \ 'blue','darkblue','evening','morning','murphy',
            \ 'ron','shine','peachpuff','koehler','industry',
            \ 'elflord','Tomorrow-Night-Bright','darkburn',
            \ 'desert_terminal',
            \]


"--------------------------------------------------------------------
"vim-markdown settings
"--------------------------------------------------------------------
" let g:instant_markdown_slow = 1
" let g:instant_markdown_autostart = 1


"--------------------------------------------------------------------
"ack.vim settings
"--------------------------------------------------------------------
" If you want to open a quickview window with 30 lines you can do:
let g:ack_qhandler = "botright copen 15"
let g:ack_autofold_results = 1
let g:ackhighlight = 1
let g:ack_autoclose = 1
" nnoremap <Leader>a :Ack!<Space>
nnoremap <Leader>a :Ag<Space>
" nnoremap <Leader><space> :<C-P><CR>
let g:ack_default_options = " -s -H --nocolor --nogroup --column --smart-case --follow"
let g:ack_mappings = { "o": "<CR>zz"  }
"g:ack_mappings
" Default: {
      " \ "t": "<C-W><CR><C-W>T",
      " \ "T": "<C-W><CR><C-W>TgT<C-W>j",
      " \ "o": "<CR>",
      " \ "O": "<CR><C-W><C-W>:ccl<CR>",
      " \ "go": "<CR><C-W>j",
      " \ "h": "<C-W><CR><C-W>K",
      " \ "H": "<C-W><CR><C-W>K<C-W>b",
      " \ "v": "<C-W><CR><C-W>H<C-W>b<C-W>J<C-W>t",
      " \ "gv": "<C-W><CR><C-W>H<C-W>b<C-W>J" }
" let g:ack_mappings = {
          " \  'q':  ':close<CR>',
          " \ 'gv': '<C-W><CR><C-W>L<C-W>p<C-W>J' }

" This option list all maps create on quickfix/Location list window.  Example, if you want to open the result in the middle of the screen:
" let g:ack_mappings = { "o": "<CR>zz"  }


"--------------------------------------------------------------------
"vim-tig settings
"--------------------------------------------------------------------
let g:tig_executable = 'tig'
" let g:tig_default_command = 'status'
" let g:tig_on_exit = 'bw!'
" let g:tig_open_command = 'new'


"--------------------------------------------------------------------
"vim-unite-tig settings
"--------------------------------------------------------------------
" 表示する数を 20に指定 (defalut:50)
let g:unite_tig_default_line_count = 100

" 日時表示形式を相対表示の指定 (defalut:iso)
let g:unite_tig_default_date_format = 'relative'
"
" ,ut にて起動
" nnoremap <silent> <leader>ut :<C-u>Unite tig -no-split<CR>
nnoremap <silent> <leader>ut :<C-u>Unite tig <CR>

" 選択時に自動でdiff表示する場合
nnoremap <silent> <leader>uta :<C-u>Unite tig -no-split -auto-preview<CR>
" nnoremap <silent> <leader>uta :<C-u>Unite tig  -auto-preview<CR>


"--------------------------------------------------------------------
"vim-signature settings
"--------------------------------------------------------------------
" let g:SignatureMarkTextHL = "Exception"
function Example(lineno)
    return "Exception"
endfunction
let g:SignatureMarkTextHL = function("Example")
let g:SignatureMarkTextHLDynamic = 1

" let g:gitgutter_diff_args = '-w'
" let g:gitgutter_diff_base = '<commit SHA>'
" let g:gitgutter_highlight_lines = 1
" set updatetime=200

"同步运行
let g:gitgutter_async = 0
"--------------------------------------------------------------------
"nerdtree-ack settings
"--------------------------------------------------------------------
"JUST PRESS ms in NERDtree place
"


"--------------------------------------------------------------------
"vim-colorscheme  settings
"--------------------------------------------------------------------
" colorscheme     molokai     "This is fine
colorscheme     monokai
" colorscheme     lucario
" colorscheme     dracula
" colorscheme     yaflandia
" colorscheme     radicalgoodspeed
" colorscheme    Revolution
" colorscheme     flattr
" colorscheme     slate
" colorscheme     solarized
" colorscheme     zenburn
" colorscheme     wombat 　"透明的
" colorscheme     candycode
" colorscheme       256-jungle
" colorscheme       woju
" colorscheme     hybrid_material "Also fine
" colorscheme     vj   "Also fine
" colorscheme     alduin  "Also fine
" colorscheme     jellyx
" colorscheme     landscape   "透明的
" colorscheme      lizard256
" colorscheme         mophiaSmoke "透明的
" colorscheme        vimbrant  "注释有点看不清楚
" colorscheme       Benokai   "全黑的
" colorscheme         meta5       "This is fine

"--------------------------------------------------------------------
"A.vim settings
"--------------------------------------------------------------------
":A switches to the header file corresponding to the current file being edited
nnoremap <space>a :A<CR>

"(or vise versa)
":AS splits and switches
nnoremap <space>as :AS<CR>
":AV vertical splits and switches
nnoremap <space>av :AV<CR>
":AT new tab and switches
":AN cycles through matches
":IH switches to file under cursor
nnoremap <space>ih :IH<CR>
":IHS splits and switches
nnoremap <space>ihs :IHS<CR>
":IHV vertical splits and switches
nnoremap <space>ihv :IHV<CR>
":IHT new tab and switches
":IHN cycles through matches
"<Leader>ih switches to file under cursor
"<Leader>is switches to the alternate file of file under cursor (e.g. on
"<foo.h> switches to foo.cpp)
"<Leader>ihn cycles through matches

"--------------------------------------------------------------------
"CtrlSF settings
"--------------------------------------------------------------------
"Usage:
"      :CtrlSF [arguments] {pattern} [path] ...
"Arguments                                                  *ctrlsf-arguments*
"'-after', '-A'                              *ctrlsf_args_A*
" '-before', '-B'                             *ctrlsf_args_B*
" '-context', '-C'                           *ctrlsf_args_C*
" '-filetype'
":CtrlSF -filetype vim foo
"'-filematch', '-G'                       *ctrlsf_args_G*
" '-ignorecase', '-I'                     *ctrlsf_args_I*
" '-ignoredir'
":CtrlSF -ignoredir "bower_components"
" '-literal', '-L'      Use pattern as literal string.
":CtrlSF -L foo.*
" '-matchcase', '-S'    Make this search be case-sensitive.
" '-regex', '-R'        Use pattern as regular expression.
" '-smartcase'          Make this search be smart-cased.
"--------------------------------------------------------------------
"
let g:ctrlsf_auto_close = 0
let g:ctrlsf_ackprg = 'ag'
" let g:ctrlsf_indent = 2
let g:ctrlsf_selected_line_hl = 'op'
" let g:ctrlsf_winsize = '40%'
" let g:ctrlsf_mapping = {
        " \ "next": "n",
        " \ "prev": "N",
        " \ "openb": "",
        " \ }
let g:ctrlsf_mapping = {
        \ "next": "n",
        \ "prev": "N",
        \ }

" The unit prefix key.
nnoremap    [ctrlsf]   <Nop>
nmap 8  [ctrlsf]
nnoremap [ctrlsf]f :CtrlSF
nnoremap [ctrlsf]o : CtrlSFOpen <CR>
nnoremap [ctrlsf]p : CtrlSFUpdate <CR>


"--------------------------------------------------------------------
" GitGutter settings
"--------------------------------------------------------------------
nnoremap <space>hi :GitGutterLineHighlightsEnable<CR>
nnoremap <space>hn :GitGutterLineHighlightsDisable<CR>


"--------------------------------------------------------------------
"neosnippet.vim  settings
"--------------------------------------------------------------------
" Plugin key-mappings.
imap <C-j>     <Plug>(neosnippet_expand_or_jump)
smap <C-j>     <Plug>(neosnippet_expand_or_jump)
xmap <C-j>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
" smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1

" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'



"--------------------------------------------------------------------
"ycm  settings
"--------------------------------------------------------------------
let g:ycm_global_ycm_extra_conf = '~/.vim/config/.ycm_extra_conf.py'
" let g:ycm_python_binary_path = '/usr/bin/python2.7'
" let g:ycm_server_python_interpreter = '/usr/bin/python2.7'
" if getcwd() =~ "kernel"
    " let g:ycm_global_ycm_extra_conf='~/ycm_extra_conf_kernel.py'
" else
    " let g:ycm_global_ycm_extra_conf='~/ycm_extra_conf.py'
" endif

" let g:ycm_key_list_select_completion=[]
" let g:ycm_key_list_previous_completion=[]
let g:UltiSnipsExpandTrigger = "<c-j>"
let g:ycm_server_use_vim_stdout = 1
let g:ycm_server_log_level = 'debug'
let g:ycm_enable_diagnostic_highlighting = 1

"let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'
set completeopt=longest,menu    "让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
autocmd InsertLeave * if pumvisible() == 0|pclose|endif "离开插入模式后自动关闭预览窗口
inoremap <expr> <space>       pumvisible() ? "\<C-y>" : "\<space>"  "按空格键即选中当前项
let g:ycm_cache_omnifunc=1 " Do not 每次都重新生成缓存匹配项
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_collect_identifiers_from_tags_files = 0 " do not include ctags, cause it's too big some times.
"在注释输入中也能补全
let g:ycm_complete_in_comments = 1
"在字符串输入中也能补全
let g:ycm_complete_in_strings = 1
"注释和字符串中的文字也会被收入补全
let g:ycm_collect_identifiers_from_comments_and_strings = 0
"关闭加载提示
let g:ycm_confirm_extra_conf = 0

let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_complete_in_comments_and_strings=1
let g:ycm_key_list_select_completion = ['<C-TAB>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-S-TAB>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-Tab>'
" let g:ycm_global_ycm_extra_conf="~/.vim/.ycm_extra_conf.py"
let g:tern_show_argument_hints='on_hold'
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:ycm_always_populate_location_list = 1


nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR> " 跳转到定义处
nnoremap <space>t :YcmCompleter GetType<CR> " 跳转到定义处
nnoremap <leader>dc :YcmCompleter GetDoc<CR> " 跳转到定义处


"--------------------------------------------------------------------
"jedi-vim settings
"--------------------------------------------------------------------
" Completion <C-Space>
" Goto assignments <leader>g (typical goto function)
" Goto definitions <leader>d (follow identifier as far as possible, includes imports and statements)
" Show Documentation/Pydoc K (shows a popup with assignments)
" Renaming <leader>r
" Usages <leader>n (shows all the usages of a name)
" Open module, e.g. :Pyimport os (opens the os module)


"--------------------------------------------------------------------
"color_code settings delete it cause it not work
"--------------------------------------------------------------------
" let g:color_coded_enabled = 1
" let g:color_coded_filetypes = ['c', 'cpp', 'h', 'cxx', '.in']

"--------------------------------------------------------------------
"ycm settings
"--------------------------------------------------------------------
" nmap <F1> :YcmGenerateConfig<CR>

"--------------------------------------------------------------------
" switch between *.h and *.c files settings
"--------------------------------------------------------------------
map <leader>S :call CurtineIncSw()<CR>

"--------------------------------------------------------------------
"DoxygenToolkit settings
"--------------------------------------------------------------------
let g:DoxygenToolkit_briefTag_funcName = "no"
" let loaded_DoxygenToolkit = 1
let g:DoxygenToolkit_briefTag_pre=""
let g:DoxygenToolkit_paramTag_pre="@param[in] "
let g:DoxygenToolkit_returnTag="@return "
" let g:DoxygenToolkit_blockHeader="--------------------------------------------------------------------------"
" let g:DoxygenToolkit_blockFooter="--------------------------------------------------------------------------"
let g:DoxygenToolkit_authorName="Roy.Liao <royliao1026@gmail.com>"
let g:DoxygenToolkit_licenseTag="MIT License"
"create doxygen comment
map <leader>do :Dox<CR>
map <leader>da :DoxAuthor<Cr>
map <leader>dl :DoxLic<cr>


"--------------------------------------------------------------------
"auto-format settings
"--------------------------------------------------------------------
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 0
" let g:formatterpath = ['/some/path/to/a/folder', '/home/superman/formatters']
let g:formatterpath = [ '~/.vim/formatter/bin']
" old use
" let g:formatdef_harttle = '"astyle --mode=c --style=linux --indent-classes --indent=tab=8 --indent=force-tab=8 --remove-braces --align-reference=name --align-pointer=name --delete-empty-lines --pad-comma --attach-closing-while -K -H -p -M -N -U -f -C -w -xb --max-code-length=80 --break-after-logical --break-return-type"'
" let g:formatdef_harttle = '"astyle --mode=c --style=linux --indent-classes --indent=tab=8 --indent=force-tab=8 --remove-braces --align-reference=name --align-pointer=name --delete-empty-lines --pad-comma --attach-closing-while -K -H -p -M -N -U -f -C -w -xb --max-code-length=80 --break-after-logical --break-return-type --break-return-type-decl"'
" let g:formatters_c = ['harttle']
" let g:formatters_h = ['harttle']
" let g:formatters_cpp = ['harttle']
" let g:formatters_hpp = ['harttle']
" let g:formatters_cxx = ['harttle']
" let g:formatters_java = ['harttle']
" let g:formatters_py = ['harttle']
" let g:formatters_sh = ['harttle']
" let g:formatdef_uncrustify = '"uncrustify"'
" let g:formatters_cpp = ['uncrustify']
" let g:formatters_java = ['uncrustify']
" autocmd FileType c noremap <buffer> <c-f> :call Uncrustify('c')<CR>
" autocmd FileType c vnoremap <buffer> <c-f> :call RangeUncrustify('c')<CR>
" autocmd FileType cpp noremap <buffer> <c-f> :call Uncrustify('cpp')<CR>
" autocmd FileType cpp vnoremap <buffer> <c-f> :call RangeUncrustify('cpp')<CR>

" -----------------------------------------------------------------------------
" for Linux C
" -----------------------------------------------------------------------------
if has("autocmd")
	autocmd FileType c set tabstop=8|set softtabstop=8|set shiftwidth=8|set noexpandtab
endif
" let g:formatdef_CSTYLE = '"astyle --style=linux --indent=tab --align-reference=name --align-pointer=name --delete-empty-lines --pad-comma  -K -H -p -M -N -U -f -C -w"'
" let g:formatdef_CSTYLE = '"astyle --mode=c --style=linux --indent-classes --indent=tab=8 --indent=force-tab=8 --remove-braces --align-reference=name --align-pointer=name --delete-empty-lines --pad-comma --attach-closing-while -H -p -M -U -f -w -xb --max-code-length=80 --break-after-logical --break-return-type"'
let g:formatdef_CSTYLE = '"astyle --mode=c --style=linux --indent-classes --indent=tab=8 --indent=force-tab=8 --remove-braces --align-reference=name --align-pointer=name --delete-empty-lines --pad-comma --attach-closing-while -H -p -M -U -f -w -xb --max-code-length=80 --break-after-logical"'
let g:formatters_c = ['CSTYLE']
let g:formatters_h = ['CSTYLE']

"-----------------------------------------------------------------------------
" for C++
"
"------------------------------------------------------------------------------
if has("autocmd")
	autocmd FileType cpp set tabstop=4|set softtabstop=4|set shiftwidth=4|set expandtab
endif
" let g:formatdef_CPPSTYLE = '"astyle --style=java --indent=spaces=4 --align-reference=name --align-pointer=name --delete-empty-lines --pad-comma  -K -H -p -M -U -f -w"'
let g:formatdef_CPPSTYLE = '"astyle --mode=c --style=java --indent=spaces=4 --align-reference=name --align-pointer=name --delete-empty-lines --pad-comma --attach-closing-while -S -K -H -p -M  -U -f -w -xb -j --break-after-logical -xn -xc"'
let g:formatdef_JAVASTYLE = '"astyle --mode=java --style=java --indent=spaces=4 --align-reference=name --align-pointer=name --delete-empty-lines --pad-comma --attach-closing-while -S -K -H -p -M  -U -f -w -xb -j --break-after-logical"'
let g:formatters_cpp = ['CPPSTYLE']
let g:formatters_hpp = ['CPPSTYLE']
let g:formatters_cxx = ['CPPSTYLE']
let g:formatters_hxx = ['CPPSTYLE']
let g:formatters_java = ['JAVASTYLE']
" -----------------------------------------------------------------------------

"--------------------------------------------------------------------
"gist-vim settings
"--------------------------------------------------------------------
let g:gist_clip_command = 'xclip -selection clipboard'

"--------------------------------------------------------------------
"vim-clang-format settings
"--------------------------------------------------------------------
" let g:clang_format#code_style = 'llvm'


"--------------------------------------------------------------------
"vim-wheel settings
"--------------------------------------------------------------------
let g:wheel#map#up   = '<c-k>'
let g:wheel#map#down = '<c-j>'
let g:wheel#line#threshold = 10  " lines from start or end
let g:wheel#map#mouse = 1       " 1=natural, 0=disable, -1=reverse
let g:wheel#scroll_on_wrap = 1      " 0=disable, 1=enable (default)
"--------------------------------------------------------------------
"vim-clazone settings
"--------------------------------------------------------------------
" hi SignColumn ctermbg=0 ctermfg=0
" function! ShowSignColumn()

" sign define dummy
    " execute 'sign place 9999 line=1 name=dummy buffer=' . bufnr('')
" endfunc
" au BufRead,BufNewFile * call ShowSignColumn()
"
nnoremap ;c :Calzone<CR>

"--------------------------------------------------------------------
"c.vim settings
"--------------------------------------------------------------------
let  g:C_UseTool_cmake   = 'yes'
let  g:C_UseTool_doxygen = 'yes'

"--------------------------------------------------------------------
"vim-json settings
"--------------------------------------------------------------------
" let g:vim_json_syntax_conceal = 0

"formater json
nnoremap <leader>js :%!python -m json.tool<CR>

"--------------------------------------------------------------------
"rainbow_parentheses.vim
"--------------------------------------------------------------------
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]

let g:rbpt_max = 16
" let g:rbpt_loadcmd_toggle = 0

au VimEnter * RainbowParenthesesToggle
"{}
au Syntax * RainbowParenthesesLoadBraces
"()
au Syntax * RainbowParenthesesLoadRound
"[]
au Syntax * RainbowParenthesesLoadSquare
"<>
au Syntax * RainbowParenthesesLoadChevrons

"--------------------------------------------------------------------
"python-mode settings
"--------------------------------------------------------------------



"--------------------------------------------------------------------
"clang_complete settings
"--------------------------------------------------------------------
" path to directory where library can be found
" let g:clang_library_path='/usr/lib/llvm-3.8/lib'
" or path directly to the library file
let g:clang_library_path='/usr/lib/libclang.so.3.8'

"--------------------------------------------------------------------
"undotree settings
"--------------------------------------------------------------------
" nmap <F6> :UndotreeToggle<CR>
nmap <F6> :RainbowParenthesesLoadBraces<CR>
nmap <F7> :RainbowParenthesesLoadRound<CR>
" | RainbowParenthesesLoadSquare | RainbowParenthesesLoadChevrons<CR>

"--------------------------------------------------------------------
"vim-expand-region settings
"--------------------------------------------------------------------
" map v <Plug>(expand_region_expand)
" map <C-v> <Plug>(expand_region_shrink)

"--------------------------------------------------------------------
" vim-nerdtree-syntax-highlight" settings
"--------------------------------------------------------------------
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1
let g:NERDTreeHighlightFolders = 1 " enables folder icon highlighting using exact match
let g:NERDTreeHighlightFoldersFullName = 1 " highlights the folder name
" you can add these colors to your .vimrc to help customizing
let s:brown = "905532"
let s:aqua =  "3AFFDB"
let s:blue = "689FB6"
let s:darkBlue = "44788E"
let s:purple = "834F79"
let s:lightPurple = "834F79"
let s:red = "AE403F"
let s:beige = "F5C06F"
let s:yellow = "F09F17"
let s:orange = "D4843E"
let s:darkOrange = "F16529"
let s:pink = "CB6F6F"
let s:salmon = "EE6E73"
let s:green = "8FAA54"
let s:lightGreen = "31B53E"
let s:white = "FFFFFF"
let s:rspec_red = 'FE405F'
let s:git_orange = 'F54D27'

let g:NERDTreeExtensionHighlightColor = {} " this line is needed to avoid error
let g:NERDTreeExtensionHighlightColor['css'] = s:blue " sets the color of css files to blue

let g:NERDTreeExactMatchHighlightColor = {} " this line is needed to avoid error
let g:NERDTreeExactMatchHighlightColor['.gitignore'] = s:git_orange " sets the color for .gitignore files

let g:NERDTreePatternMatchHighlightColor = {} " this line is needed to avoid error
let g:NERDTreePatternMatchHighlightColor['.*_spec\.rb$'] = s:rspec_red " sets the color for files ending with _spec.rb

"--------------------------------------------------------------------
"unite-location settings
"--------------------------------------------------------------------
" nnoremap <silent> <space>up  :<C-u>Unite -resume<CR>
" nnoremap <silent> <space>uj  :call execute('Unite -resume -select=+'.v:count1.' -immediately')<CR>
" nnoremap <silent> <space>uk  :call execute('Unite -resume -select=-'.v:count1.' -immediately')<CR>
nnoremap <silent> <space>uq  :<C-u>Unite  -auto-resize quickfix<CR>
nnoremap <silent> <space>ul  :<C-u>Unite  -auto-resize location_list<CR>

"--------------------------------------------------------------------
"color type settings
"--------------------------------------------------------------------
" nmap <F12> :UpdateTypesFile<CR>

nnoremap <F12>c :exe ':silent !chromium-browser %'<CR>

"--------------------------------------------------------------------
"vim-cpp-enhanced-highlight
"--------------------------------------------------------------------
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_experimental_simple_template_highlight = 1
let g:cpp_concepts_highlight = 1
let c_no_curly_error=1

"--------------------------------------------------------------------
"windows size settings
"--------------------------------------------------------------------
"最大化窗口
map <F10> <C-W>_<C-W><Bar>
"还原窗口大小
map <c-F10> <C-W>=

"--------------------------------------------------------------------
"vim-rooter settings
"--------------------------------------------------------------------
"change to the current file dir
nnoremap <space>cd :lcd %:p:h<CR>

"change to the current project root dir
nnoremap <space>ct :Rooter<CR>

"By default vim-rooter doesn't resolve symbolic links. To resolve links:
let g:rooter_resolve_links = 1

" Don't change directory (default).
" let g:rooter_change_directory_for_non_project_files = ''

" Change to file's directory (similar to autochdir).
" let g:rooter_change_directory_for_non_project_files = 'current'

" Change to home directory.
" let g:rooter_change_directory_for_non_project_files = 'home'

"---------------------------------------------------------------
"fzf.vim settings
"---------------------------------------------------------------
" - down / up / left / right
" let g:fzf_prefer_tmux = 1
let g:fzf_layout = { 'down': '~50%' }
let $FZF_DEFAULT_COMMAND = 'ag -g ""'
let $FZF_DEFAULT_OPTS = ' --inline-info'

" let g:fzf_prefer_vim_terminal = 1

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }

" In Neovim, you can set up fzf window using a Vim command
" let g:fzf_layout = { 'window': 'enew' }
" let g:fzf_layout = { 'window': '-tabnew' }
" let g:fzf_layout = { 'window': '10split enew' }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" [[B]Commits] Customize the options used by 'git log':
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'

" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ctags -R'

" [Commands] --expect expression for directly executing the command
let g:fzf_commands_expect = 'alt-enter,ctrl-x'

"Usage
" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Advanced customization using autoload functions
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

"--------------------------------------------------------------------
"fzf-filemru settings
"--------------------------------------------------------------------
nnoremap <c-p> :FilesMru --tiebreak=end<cr>
augroup custom_filemru
  autocmd!
  autocmd BufWinEnter * UpdateMru
augroup END

nnoremap    [misc]   <Nop>
nmap 0  [misc]

nnoremap <silent>[misc]f :FilesMru --tiebreak=end<cr>
nnoremap <silent>[misc]a :FZFFreshMru<cr>

"--------------------------------------------------------------------
"unite-fzf
"--------------------------------------------------------------------
"call unite#filters#matcher_default#use(['matcher_fzf'])

"--------------------------------------------------------------------
"current-func-info.vim
"--------------------------------------------------------------------
map <leader>df :echo cfi#format("%s", "")<CR>
" let &statusline .= ' [%{cfi#format("%s", "")}]'
"
"--------------------------------------------------------------------
"vim-radical usage
"--------------------------------------------------------------------
" gA shows the four representations of the number under the cursor.
" crd, crx, cro, crb convert the number under the cursor to decimal, hex, octal, binary, respectively.
"

"--------------------------------------------------------------------
" vim-hexdec usage
"--------------------------------------------------------------------
" nnoremap gbh :Dec2hex<CR>
" nnoremap gbd :Hex2dec<CR>
"
"--------------------------------------------------------------------
"cscope_autoupdate settings
"--------------------------------------------------------------------
"
nnoremap <leader>fa :call CscopeFindInteractive(expand('<cword>'))<CR>
nnoremap <leader>l :call ToggleLocationList()<CR>

"--------------------------------------------------------------------
" splitjoin.vim settings
"--------------------------------------------------------------------
" gS to split a one-liner into multiple lines
" gJ (with the cursor on the first line of a block) to join a block into a single-line statement.

"--------------------------------------------------------------------
" tabular settings
"--------------------------------------------------------------------
let mapleader=','
if exists(":Tabularize")
	nmap <Leader>a= :Tabularize /=<CR>
	vmap <Leader>a= :Tabularize /=<CR>
	nmap <Leader>a: :Tabularize /:\zs<CR>
	vmap <Leader>a: :Tabularize /:\zs<CR>
endif
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction
"--------------------------------------------------------------------
" vim-easy-align settings
"--------------------------------------------------------------------
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

"--------------------------------------------------------------------
" Mark--Karkat settings
"--------------------------------------------------------------------

nnoremap <Leader><space> :MarkClear<CR>

"--------------------------------------------------------------------
" deoplete.nvim settings
"--------------------------------------------------------------------
let g:deoplete#enable_at_startup = 1

"--------------------------------------------------------------------
" vim-multiple-cursors settings
"--------------------------------------------------------------------
let g:multi_cursor_use_default_mapping=0

" Default mapping
let g:multi_cursor_start_word_key      = '<C-n>'
let g:multi_cursor_select_all_word_key = '<A-n>'
let g:multi_cursor_start_key           = 'g<C-n>'
let g:multi_cursor_select_all_key      = 'g<A-n>'
let g:multi_cursor_next_key            = '<C-n>'
let g:multi_cursor_prev_key            = '<C-p>'
let g:multi_cursor_skip_key            = '<C-x>'
let g:multi_cursor_quit_key            = '<Esc>'

"--------------------------------------------------------------------
" color_coded settings
"--------------------------------------------------------------------
let g:color_coded_enabled = 1
" let g:color_coded_filetypes = ['c', 'cpp', 'objc']
let g:color_coded_filetypes = ['cpp', 'objc']

"--------------------------------------------------------------------
" vim-filebeagle settings
"--------------------------------------------------------------------
let g:filebeagle_hijack_netrw = get(g:, 'filebeagle_hijack_netrw', 1)
let g:filebeagle_suppress_keymaps = get(g:, 'filebeagle_suppress_keymaps', 0)
let g:filebeagle_show_hidden = get(g:, 'filebeagle_show_hidden', 0)
let g:filebeagle_show_line_numbers = 1
let g:filebeagle_show_line_relativenumbers = get(g:, 'filebeagle_show_line_relativenumbers', -1)
let g:filebeagle_buffer_legacy_key_maps = get(g:, 'filebeagle_buffer_legacy_key_maps', 0)
let g:filebeagle_buffer_background_key_map_prefix = get(g:, 'filebeagle_buffer_background_key_map_prefix', 'p')
let g:filebeagle_buffer_normal_key_maps = get(g:, 'filebeagle_buffer_normal_key_maps', {})
let g:filebeagle_buffer_visual_key_maps = get(g:, 'filebeagle_buffer_visual_key_maps', {})
let g:filebeagle_buffer_map_movement_keys = get(g:, 'filebeagle_buffer_map_movement_keys', 1)
let g:filebeagle_check_gitignore = 1
let g:filebeagle_statusline = get(g:, 'filebeagle_statusline', '%( %{FileBeagleStatusLineCurrentDirInfo()} %)%=%( %{FileBeagleStatusLineFilterAndHiddenInfo()} %)')

" 1}}}

"--------------------------------------------------------------------
" limelight.vim
"--------------------------------------------------------------------
" Color name (:help cterm-colors) or ANSI code
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240

" Color name (:help gui-colors) or RGB color
let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_conceal_guifg = '#777777'

" Default: 0.5
let g:limelight_default_coefficient = 0.7

" Number of preceding/following paragraphs to include (default: 0)
let g:limelight_paragraph_span = 10

" Beginning/end of paragraph
"   When there's no empty line between the paragraphs
"   and each paragraph starts with indentation
let g:limelight_bop = '^\s'
let g:limelight_eop = '\ze\n^\s'

" Highlighting priority (default: 10)
"   Set it to -1 not to overrule hlsearch
let g:limelight_priority = -1

"--------------------------------------------------------------------
" ranger.vim settings
"--------------------------------------------------------------------
let g:ranger_map_keys = 0

"--------------------------------------------------------------------
" vim-ags settings
"--------------------------------------------------------------------

" This is the ag executable path
let g:ags_agexe = 'ag'

" This is the max-count parameter to be passed to ag
let g:ags_agmaxcount = 2000

" This is the context parameter to be passed to ag
let g:ags_agcontext = 3

" This is a flag that determines whether to run the ag search
" asynchronously when supported (currently only in neovim)
" let g:ags_enable_async = 1

" This determines whether to work with a single results window or
" with one per tab.

let g:ags_results_per_tab = 0

" Flag to disable showing statistics in the command bar. This
" could be used when displaying statistics in a status line plugin
" such as lightline. In that case use ags#get_status_string to get
" status line information.
let g:ags_no_stats = 0

" This is the maximum number of lines before disabling the
" statistics info that shows when navigating results in the
" search results window. When the number of lines returned by
" ag is larger than the value of this variable the statistics
" are disabled to improve performance.
let g:ags_stats_max_ln = 5000

" This enables showing file line numbers in edit mode as visual
" cues. The file numbers as well as file paths in edit mode are
" not meant to be edited and could result in unwanted changes if
" removed.
let g:ags_edit_show_line_numbers = 0

" When writing files from edit mode this allows to skip writing
" lines that have changed from outside vim. This could have
" mixed results as some lines will be changed and others not.
" However, the search results window will be updated with the
" file lines exactly as they appear in the file.
let g:ags_edit_skip_if_file_changed = 0

" This determines the search results window height. It defaults
" to half the screen.
    let g:ags_winheight = ''

" This determines the placement of the search results window. It
" defaults to |bottom|. Possible values are: |top|, |bottom|, |above|,
" |below|, |far-left|, |far-right|, |left|, |right|.
let g:ags_winplace = 'bottom'

" This variable contains the predefined search arguments
" used to ensure that the search results are highlighted
" properly in Vim. Any of these arguments can be overwritten
" when entering the search command.
let g:ags_agargs = {
	\ '--break'             : [ '', '' ],
	\ '--color'             : [ '', '' ],
	\ '--color-line-number' : [ '"1;30"', '' ],
	\ '--color-match'       : [ '"32;40"', '' ],
	\ '--color-path'        : [ '"1;31"', '' ],
	\ '--column'            : [ '', '' ],
	\ '--context'           : [ 'g:ags_agcontext', '-C' ],
	\ '--filename'          : [ '', '' ],
	\ '--group'             : [ '', '' ],
	\ '--heading'           : [ '', '-H' ],
	\ '--max-count'         : [ 'g:ags_agmaxcount', '-m' ],
	\ '--numbers'           : [ '', '' ]
	\ }

" =============================================================

" :Ags [{file-type}] [{options}] {pattern} [{directory}]
"
    " Runs a recursive search in {directory} for
    " {pattern}. If {pattern} is not specified it
    " will be set to the word under cursor. The
    " {directory} will default to the current directory.
    " {options} and {file-type} are passed directly to
    " the ag executable. In addition a few other options,
    " as set in |ags_agargs|, will be specified for display purposes.
"
    " For example
    " :Ags --js Reducer
                                                      " *:AgsAdd*
" :AgsAdd [{file-type}] [{options}] {pattern} [{directory}]
"
    " Like |:Ags| but the matches are appended to the
    " current search results.
"
                                                     " *:AgsLast*
" :AgsLast
    " Runs the last search. This could be used after entering
    " edit mode to return to view mode.
"
                                                     " *:AgsQuit*
" :AgsQuit
"
    " Closes the search results window whether in edit or
    " view mode.
"
                                        " *:AgsEditSearchResults*
" :AgsEditSearchResults
"
    " Enters edit mode if the search results is open in
    " view mode.
"
                                          " *:AgsShowLastCommand*
" :AgsShowLastCommand
"
    " Displays the command for the last search.
"
" =============================================================
" MAPPINGS                                         *ags-mappings*
"
" Once inside the search results window:~
"
    " p    - navigate file paths forward
    " P    - navigate files paths backwards
    " r    - navigate results forward
    " R    - navigate results backwards
    " a    - display the file path for current results
    " c    - copy to clipboard the file path for current results
    " E    - enter edit mode
"
    " oa   - open file above the results window
    " ob   - open file below the results window
    " ol   - open file to the left of the results window
    " or   - open file to the right of the results window
    " os   - open file in the results window
    " ou   - open file in a previously opened window
    " xu   - open file in a previously opened window and close the search results
    " <CR> - open file in a previously opened window
"
    " q    - close the search results window
    " u    - displays these key mappings
"
" =============================================================
" STATUSLINE                                     *ags-statusline*
"
" To display search results info in the status line use ags#get_status_string()
" See also |ags_no_stats| and |ags_stats_max_ln|
"
" =============================================================
" LIMITATIONS                                   *ags-limitations*
"
" Performing a search could be slow if the search returns too many
" lines. To improve performance in such cases set the context argument to 0 or 1.
"
" For example
" :Ags -C 0 search-pattern
"
" The default is 3 and can be overwritten via |g:ags_agcontext| setting.
"
" In edit mode lines can be changed but no lines can be added or removed.
" Also entering edit mode may lag if there are too many lines in the
" search results window. The context argument mentioned above will help here as well.

" =============================================================

"--------------------------------------------------------------------
"other settings
"--------------------------------------------------------------------
nnoremap <space>p :pwd<CR>
nnoremap <Leader>c :Unite colorscheme<CR>
nnoremap <space>cw :NERDTreeClose<CR> :cw<CR>
nnoremap <space>cn :cn<CR>
nnoremap <space>cp :cp<CR>
nnoremap <space>cc :close<CR>
nnoremap <space>J <Esc>i<CR><Esc>

imap <C-o> <esc>o

nnoremap <c-F8> :e!<CR>

" Commenting with #:
" 1. visually select the text rows (using V as usual)
" 2. :norm i#
" Uncommenting #:
" 1. visually select the text as before (or type gv to re-select the previous selection)
" 2. :norm x
" insert #if 0 - #endif around block of code
" map ;' mz'aO<Esc>O#if 0<Esc>'zo<Esc>i#endif<Esc>
map ;i :norm i
map ;x :norm x
map ;' mz'a<Esc>O#if 0<Esc>'zo<Esc>i#endif<Esc>


"--------------------------------------------------------------------
"unite-location settings
"--------------------------------------------------------------------
nnoremap <silent> <space>p  :<C-u>Denite -resume<CR>
nnoremap <silent> <space>j  :call execute('Denite -resume -select=+'.v:count1.' -immediately')<CR>
nnoremap <silent> <space>k  :call execute('Denite -resume -select=-'.v:count1.' -immediately')<CR>
nnoremap <silent> <space>q  :<C-u>Denite -mode=normal -auto-resize quickfix<CR>
nnoremap <silent> <space>l  :<C-u>Denite -mode=normal -auto-resize location_list<CR>

"--------------------------------------------------------------------
" deoplete.nvim settings
"--------------------------------------------------------------------
let g:deoplete#enable_at_startup = 1
